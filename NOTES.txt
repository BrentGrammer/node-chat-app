Socket.io

-Has both front end and back end library
-Makes it simple to make a server and app that uses Web Sockets.

**The client server relationship in web socket connection is based on events.
**Events can be emitted by the client or the server, and both can listen for events emitted by the other.

*A socket connection can only stay open if both the client and server are listening - if the browser is
closed or the server closes the connection, then the socket cannot be forced to stay open either way and will
be closed if one or the other disconnects.  
(Note: the client will try to reconnect if the server connection is closed.)

- Can build on top of an express server:

1) install with yarn or npm
  $ yarn add socket.io

2) require it in the server file: const socketIO = require('socket.io');

3) configure node http module with express before adding support for socket io.
   in server file:
     const http = require('http'); // at the top before sockio require statement!

    - create a server using http module and pass in the express app const:
       const server = http.createServer(app);

    - change the app.listen to server.listen - the args are the same as for app.listen:
       server.listen(PORT, () => {
        console.log('server is up on port ' + PORT);
      });
4) Create a websockets server with socket io.  pass in the server you want to use (i.e. the server created with
   http.createServer)
      var io = socketIO(server); // this enables you to communicate between the server and the client

5) on the front end, load the socket io client javascript library: 
   <script src="/socket.io/socket.io.js"> </script> // src path is relative to server directory

   -this loads the socket.io client library with methods for conecting to the websocket server and sending/receiving 
    data on the front end.

    -the method io() is exposed which is used to open a socket connection to the server and keep it open.
    in the front end code, assign what it returns to a socket variable:
      const socket = io();

  ==============

EVENTS:

-There are builtin events with socket.io and also custom events can be created and emitted.

Note: for debugging and testing, you have access to the socket variable in the console in the browser developer 
tools with methods attached etc. to emit events

Note:
EMITTING FROM THE SERVER:
** socket.emit() - emits an event to the single socket connection.
** io.emit() - emit an event to every socket connection 
** socket.broadcast.emit() - emits to all other users except the connected socket

EMITTING TO A ROOM:
socket.to('room').emit()
io.to('room').emit()
socket.broadcast.to('room').emit()

built in event methods:

io.on('connection') -- registers an event listener for connection when a client connects and grants access to socket in callback
/ NOTE: io.on('connection') is a special event that gives you access to the socket to use socket.io methods on
// all event handling and listening, emiting etc. is done inside the io.on() callback block

builtin Events:

SERVER EVENTS:

'connection' - listen for a new connection and fire a callback with a socket representing the individual new socket 
that connected passed in (not all sockets).
  Ex:
    io.on('connection', (socket) => {
      console.log('new user connected')
    })


'disconnect' - fires when connection lost - use in io.on(connection) callback:
  io.on('connection', (socket) => {
      console.log('new user connected');

      socket.on('disconnect', () => {
        console.log('client disconnected')
      })
    })

CLIENT EVENTS:

-'connect' event is also available on the client.
   socket.on('connect', () => {
     console.log('Connected to server.')
   })
   // socket is not an arg since it is already available and assigned as a const to io();

- 'disconnect' - fires when the connection to the server is lost or shut down.
   socket.on('disconnect', () => {
     console.log('Disconnected from server.')
   })

CUSTOM EVENTS:

- You can emit an event from the client or server and listen for that event on the other end to handle it.

Listen to custom events:
  socket.on('customEvent', function(dataSent) {
    console.log('custom event fired)
  })
// any data emitted with the event is provided in the first arg to the callback listener


Emit the event:
 // you don't pass in a handler, but data instead.  By default you do not have to specify and pass in data.
  socket.emit('customEvent', {
    data: value,
    data2: value2
  })

====================

BASIC CHAT EVENT SYSTEM:

1) Server listens for 'createMessage' event from client
2) When received, the server listener callback emits a 'newMessage' event with io.emit and makes a createdAt 
field attached in addition to the data.
// note (the createdAt is not sent from the client to prevent spoofing the time but is created on the server)

**socket.emit emits an event to the single socket connection.
** Use io.emit() to emit an event to every socket connection including the sending client socket

Broadcasting: emiting an event to every user except one user (useful for ...user has joined...?)

On server:

  socket.on('createMessage', (message) => {
    console.log('createMessage', message);
    //use io.emit to broadcast an event emit to all connected sockets:
    io.emit('newMessage', {
      from: message.from,
      text: message.text,
      createdAt: new Date().getTime()
    });

On Client:

socket.on('newMessage', function(message) {
  console.log('new message', message)
})

// client emits a 'createMessage' event when user enters a message which server listens for and broadcasts in callback


BROADCASTING AN EVENT:


Broadcasting: emiting an event to every user except one user (useful for ...user has joined... and not show to
client joining)

// this builtin method sends event to everyone except this socket:

  socket.broadcast.emit('newMessage', {
    ...messagedata
  })

Ex greeting new user and notifying other users:

// Greet new user:
  socket.emit('newMessage', {
    from: "Admin",
    text: "Welcome to chat app.",
    createdAt: new Date().getTime()
  });
  // Broadcast to other users that a new user joined:
  socket.broadcast.emit('newMessage', {
    from: "Admin",
    text: "New user joined.",
    createdAt: new Date().getTime()
  });

=================================

EVENT ACKNOWLEDGEMENTS:

-Way to handle if emitted events received are invalid and provide an option to send data back to
the emitter source (i.e. the client)
(Acknowledgements can be implemented both ways client to server or server to client)

-Server sends acknowledgement with success or error message to instruct client what to do to send a 
valid request.

-You need to make changes to both the emit and listener code for acknowledgments to work.

 1) on emitter, add a third argument, a callback.  This is defining a function to be called on the 
    listener handler which will be passed in as a callback arg

        socket.emit('createMessage', { 
          from: "Frank",
          text: "hi"
        }, function(data) {
          console.log('from the server', data)
        }

  2) on listener, pass in a second argument 'callback' after the data received arg which will be 
     the function defined in the third argument of the emitter.  You can call this after  handling
     the received data.

     To send data back, pass in an arg to callback() - use an object if sending multiple pieces of data

     Ex:

     socket.on('createMessage', (message, callback) => {
        io.emit('newMessage', generateMessage(message.from, message.text));
        // part of acknowledgement set up - fn is defined in the emit code on client as a third arg
        callback({
          error: 'send this if error'
        });
      });

==================

TEMPLATING WITH MUSTACHE

-Go to github page, select version in branch dropdown by switching to tags tab.
-Get the file mustache.js and download it - click Raw and right click SAVE-AS into your public/js/libs folder
-import it into front end (index.html)

-Create template in script tags adding type attribute set to text/template and an id for grabbing with javascript if necessary:

  <script id="message-template" type="text/template">
  
  </script>

-Access the script tag, get the html and assign it as template to html variable with Mustache:

socket.on('newMessage', function(message) {
        const template = $('#message-template').html();
        const html = Mustache.render(template);

        $('#messages').append(html);

- Sending dynamic data:

      // passin the template and other args for data to pass and access with {{ <var> }}
        const html = Mustache.render(template, {
          text: message.text
        });

      In html, access passed data with {{ varName }}, i.e. {{ text }}

  ===============

  AUTOSCROLLING CHAT AREA:

  *If user is at bottom of scroll container, autoscroll on new message to the bottom.
  -If last message in the list is visible at the bottom of screen, autoscroll down into view
  -If last message in list is not visible in screen and new message comes in, do not autoscroll

  -Make height calculations with following values:
    -scrollHeight: height of entire container for messages (incl outside of view)
    -clientHeight: visible height container
    -scrollTop: number of pixels scrolled down from top of container

    *When a user is at the bottom of container, the scrollTop + clientHeight === scrollHeight.
     -this means the user is at the bottom and if a new message comes in, autoscroll should fire.
     ***Add message height since it will be present, so final calculation is:

        if (scrollTop + clientHeight + messageHeight + lastMessageHeight >= scrollHeight) then autoscroll

  1) Make a function scrollToBottom which fires everytime a new message is added to chat area.

  Ex:

  function scrollToBottom() {
      // Selectors
      const messages = $('#messages');
      // get the last message
      const newMessage = messages.children('li:last-child')
      // Heights
      // prop is cross browser to access height properties on different browsers
      const clientHeight = messages.prop('clientHeight');
      const scrollTop = messages.prop('scrollTop');
      const scrollHeight = messages.prop('scrollHeight');
      // innerHeight takes into account padding as well
      const newMessageHeight = newMessage.innerHeight();
      // prev selects previous child item = this selects second to last list item
      const lastMessageHeight = newMessage.prev().innerHeight();

      // if user is at bottom or near bottom, then scroll to bottom:
      if (clientHeight + scrollTop + newMessageHeight + lastMessageHeight >= scrollHeight) {
        console.log('should scroll');
        // set the scrolltop to the scrollHeight of entire container to move scroll to bottom
        messages.scrollTop(scrollHeight);
      }
    }

**Call this after a new message has been added in the socket event listener handler:
  socket.on('newMessage', function(message) {
        const formattedTime = moment(message.createdAt).format('h:mma')
        const template = $('#message-template').html();
        // passin the template and other args for data to pass and access with {{ <var> }}
        const html = Mustache.render(template, {
          text: message.text,
          from: message.from,
          createdAt: formattedTime
        });

        $('#messages').append(html);
        scrollToBottom();
      });

=======================

GETTING URL PARAMS FOR JOING A CHAT ROOM FROM HOME SCREEN INPUT:

-query params are on window.location.search
-decode the params sent with the join room form on the home page with deparam plugin for jQuery: 
https://gist.github.com/andrewjmead/b71e03d8df237983285892f9a265d401
  -otherwise, you need to get the values another way and be sure to decode them


CREATING ROOMS:

-Socket.io has some builtin functionality for creating rooms - this gets setup on the server.
-Create a custom join event which is emitted on the client after connection.  Provide an acknowledgement
  callback that takes an err arg which can redirect user back to the join page if data sent is invalid, etc.


    // handle join a room event on server:
  socket.on('join', (params, callback) => {
    //validate form data sent (if validation fails, send an err in the acknowledgement callback, otherwise do not send err):
    if (!isRealString(params.name) || !isRealString(params.room)) {
      callback('Name and room name are required.');
    }

    callback();
  });

On Client:

   socket.on('connect', function() {
      console.log('connected to server');
      // decode params in url query sent with join form:
      const params = $.deparam(window.location.search);

      socket.emit('join', params, function(err) {
        if (err) {
          alert(err);
          window.location.href = "/";
        } else {
          console.log('no error');
        }
      });
    });

--------------

JOINING/LEAVING ROOM WITH SOCKET.IO:

socket.join('room name');
socket.leave('room name');

On server:

    socket.on('join', (params, callback) => {
      if (!isRealString(params.name) || !isRealString(params.room)) {
        callback('Name and room name are required.');
      }

      //builtin join method with socket.io (takes a string for room name):
      socket.join(params.room);

      callback();
    });

SENDING EVENTS TO ROOMS:

-use main emit methods with .to('room name'):

  io.to('room name').emit() - emits event to everyone in room
  socket.broadcast.to('room name').emit() - emit to everyone except current socket connected in room

Ex on server:

// handle join a room event:
  socket.on('join', (params, callback) => {
    //validate form data sent (if validation fails, send an err in the acknowledgement callback, otherwise do not send err):
    if (!isRealString(params.name) || !isRealString(params.room)) {
      return callback('Name and room name are required.');
      // remember to return to stop the function from running to end
    }

    //builtin join method with socket.io (takes a string for room name):
    socket.join(params.room);

    // Greet new user:
    socket.emit('newMessage', generateMessage("Admin", "Welcome to the chat!"));
    // Broadcast to other users that a new user joined:
    socket.broadcast.to(params.room).emit('newMessage', generateMessage("Admin", `${params.name} has joined.`));

    callback();
  });


  -----

  EMITING MESSAGE EVENTS TO ROOMS:

  -on server you have access to a socket.id property.  You can make a datastructure to store users and room name 
   based on a socket id key and emit events to users/rooms based on the socket id.

   -store a users list in a user.js file in an array of objects:
     [
       {
         id: 'sdfsdfsdf',
         name: 'Bob',
         room: 'room name'
       }
     ]

  1) Create a Users class initialized to an empty array in a users.js file.

  Ex:

      class Users {
        constructor() {
          this.users = [];
        }

        addUser(id, name, room) {
          const user = { id, name, room };
          this.users.push(user);
          return user;
        }
        removeUser(id) {
          const user = this.getUser(id);

          if(user) {
            this.users = this.users.filter(user => user.id !== id);
          }
          return user;
        }
        getUser(id) {
          // return the first user or undefined
          return this.users.filter(user => user.id === id)[0];
        }
        getUserList(room) {
          // filter by room passed in
          const users = this.users.filter((user) => user.room === room);
          // build array of user names in room:
          const namesArray = users.map((user) => user.name);
          return namesArray;
        }
    }

  2) Keep the users list on the client up to date:

    - On Client: listen to an 'updateUserList' event to server to update the list when user leaves/enters room
    - On Server: emit 'updateUserList' event on user enter/leave and update the users with users class.


    /** Update users list on user joined */

    socket.join(params.room);
    // remove user from any previous rooms:
    users.removeUser(socket.id);
    // add user to new room
    users.addUser(socket.id, params.name, params.room);

    /** emit update list event to everyone in the room so client gets norified and updates their list with that returned */
    io.to(params.room).emit('updateUserList', users.getUserList(params.room));
  });

------

  Remove a user in the disconnect listener on the server file:

  socket.on('disconnect', () => {
    const user = users.removeUser(socket.id);
    // only remove user if the person joined a room (there will be no id entry for them if they didn't join)
    // (removeUser returns the user removed if successful or null otherwise if user not found)
    if (user) {
      // emit two events to every person in the chat room using io emit
      // send updated user list back to client:
      io.to(user.room).emit('updateUserList', users.getUserList(user.room));
      // emit message from admin:
      io.to(user.room).emit('newMessage', generateMessage('Admin', `${user.name} has left.`));
    }
  });

------

Add Users to a list to render on the view on client:

// if user leaves or joins room on client, emit an event to server to update the list rendered
socket.on('updateUserList', function(users) {
  const ol = $('<ol></ol>');

  users.forEach(function (user){
    ol.append($('<li></li>').text(user));
  });
  // replace the list completely with the new version (don't update with append for example)
  $('#users').html(ol);
})

----------

DISPLAYING MESSAGES TO ONLY THE ROOM USER IS IN:

-On client don't send user (i.e. handle or from) with the 'createMessage' event data.

 socket.emit('createMessage', {
    text: messageTextbox.val()
  }

-On the server, get the user/handle from the users list for the room using the users class and emit the message to
only the room using io.to(room).emit... (get the room from the user object returned from users class):

  socket.on('createMessage', (message, callback) => {
    const user = users.getUser(socket.id);
    // check if user returned and if the text is valid (this prevents users from sending empty messages or bunch of spaces)
    if (user && isRealString(message.text)) {
      io.to(user.room).emit('newMessage', generateMessage(user.name, message.text));
    }

    callback();
  });


==================

CONSIDERATIONS:

-Make chat room names insensitive, so that all names for chat rooms are converted to lowercase after entered.
-Make usernames unique
-Have active chat rooms list - use similar technique to updating user list with the users class